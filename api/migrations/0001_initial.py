# Generated by Django 4.0.3 on 2022-05-17 14:29

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'department',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100)),
                ('course', models.IntegerField()),
                ('number_of_students', models.IntegerField()),
            ],
            options={
                'db_table': 'group',
            },
        ),
        migrations.CreateModel(
            name='GroupSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trimester', models.IntegerField()),
                ('group', models.ForeignKey(db_column='group_name', on_delete=django.db.models.deletion.CASCADE, to='api.group')),
            ],
            options={
                'db_table': 'group_subject',
            },
        ),
        migrations.CreateModel(
            name='Workload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_lecture', models.BooleanField()),
                ('is_lab', models.BooleanField()),
                ('is_practice', models.BooleanField(default=True)),
                ('group_subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.groupsubject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'workload',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('credits', models.IntegerField()),
                ('lecture_count', models.IntegerField(default=0)),
                ('practice_count', models.IntegerField(default=0)),
                ('office_count', models.IntegerField(default=0)),
                ('lab_count', models.IntegerField(default=0)),
                ('lecture_hour', models.IntegerField(default=0)),
                ('practice_hour', models.IntegerField(default=0)),
                ('office_hour', models.IntegerField(default=0)),
                ('lab_hour', models.IntegerField(default=0)),
                ('total_hour', models.IntegerField(default=0)),
                ('excel_row_index', models.IntegerField(null=True)),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.department')),
                ('groups', models.ManyToManyField(related_name='subjects', through='api.GroupSubject', to='api.group')),
                ('teachers', models.ManyToManyField(related_name='subjects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'subject',
            },
        ),
        migrations.AddField(
            model_name='groupsubject',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.subject'),
        ),
        migrations.AlterUniqueTogether(
            name='groupsubject',
            unique_together={('subject', 'group')},
        ),
    ]
